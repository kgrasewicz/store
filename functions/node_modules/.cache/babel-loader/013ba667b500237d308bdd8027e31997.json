{"ast":null,"code":"var _jsxFileName = \"C:\\\\Programowanie\\\\store\\\\src\\\\Paginate.js\";\nimport React, { Component } from \"react\";\nimport propTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Paginate extends Component {\n  constructor(props) {\n    super(props);\n\n    this.determineNumberOfPages = () => {\n      const {\n        data,\n        itemsPerPage\n      } = this.props;\n      let paginatedDataObject = {};\n      let index = 0;\n      let dataLength = data.length;\n      let chunkArray = [];\n\n      for (index = 0; index < dataLength; index += itemsPerPage) {\n        let newChunk = data.slice(index, index + itemsPerPage);\n        chunkArray.push(newChunk);\n      }\n\n      chunkArray.forEach((chunk, i) => {\n        paginatedDataObject[i + 1] = chunk;\n      });\n      this.setState({\n        totalPages: chunkArray.length,\n        dataStartingIndex: itemsPerPage,\n        pageData: paginatedDataObject,\n        clickedOnNumber: 1\n      });\n    };\n\n    this.setCurrentClickedNumber = e => {\n      const {\n        target\n      } = e;\n      this.setState({\n        currentClickedNumber: parseInt(target.innerText)\n      });\n    };\n\n    this.moveToLastPage = () => {\n      this.setState({\n        currentClickedNumber: this.state.totalPages,\n        currentClickedPage: this.state.totalPages\n      });\n    };\n\n    this.moveToFirstPage = () => {\n      this.setState({\n        currentClickedNumber: 1,\n        currentClickedPage: 1\n      });\n    };\n\n    this.moveOnePageForward = () => {\n      const {\n        dataStartingIndex,\n        totalPages\n      } = this.state;\n\n      if (dataStartingIndex) {\n        this.setState({\n          dataStartingIndex: null,\n          currentClickedNumber: 2\n        });\n      } else {\n        this.setState({\n          currentClickedNumber: this.state.currentClickedNumber + 1 > totalPages ? totalPages : this.state.currentClickedNumber + 1\n        });\n      }\n    };\n\n    this.moveOnePageBackward = () => {\n      this.setState({\n        currentClickedNumber: this.state.currentClickedNumber - 1 < 1 ? 1 : this.state.currentClickedNumber - 1\n      });\n    };\n\n    this.pageNumberRender = () => {\n      const {\n        totalPages,\n        currentClickedNumber\n      } = this.state;\n      let pages = [];\n\n      for (let i = 1; i < totalPages + 1; i++) {\n        pages.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"page-number\",\n          onClick: e => {\n            this.setCurrentClickedNumber(e);\n          },\n          isclicked: currentClickedNumber === i ? true : false,\n          children: i\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }, this));\n      }\n\n      return pages;\n    };\n\n    this.state = {\n      totalPages: null,\n      dataStartingIndex: null,\n      dataLastIndex: 0,\n      currentClickedNumber: 1,\n      pageData: null\n    };\n  }\n\n  componentDidMount() {\n    this.determineNumberOfPages();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      data,\n      setData\n    } = this.props;\n    const {\n      currentClickedNumber,\n      pageData\n    } = this.state;\n\n    if (data !== prevProps.data) {\n      this.determineNumberOfPages();\n    }\n\n    if (currentClickedNumber !== prevState.currentClickedNumber) {\n      setData(pageData[currentClickedNumber]);\n    }\n  }\n\n  render() {\n    const {\n      currentClickedNumber,\n      totalPages\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"page-number-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"arrow-container\",\n          children: currentClickedNumber > 1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: this.moveToFirstPage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: this.moveOnePageBackward,\n                children: \" \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"number-wrap\",\n          children: this.pageNumberRender()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"arrow-container\",\n          children: currentClickedNumber !== totalPages ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: this.moveOnePageForward\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                onClick: this.moveToLastPage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Paginate;\nPaginate.propTypes = {\n  data: propTypes.array.isRequired,\n  setData: propTypes.func.isRequired,\n  itemsPerPage: propTypes.number.isRequired\n};","map":{"version":3,"sources":["C:/Programowanie/store/src/Paginate.js"],"names":["React","Component","propTypes","Paginate","constructor","props","determineNumberOfPages","data","itemsPerPage","paginatedDataObject","index","dataLength","length","chunkArray","newChunk","slice","push","forEach","chunk","i","setState","totalPages","dataStartingIndex","pageData","clickedOnNumber","setCurrentClickedNumber","e","target","currentClickedNumber","parseInt","innerText","moveToLastPage","state","currentClickedPage","moveToFirstPage","moveOnePageForward","moveOnePageBackward","pageNumberRender","pages","dataLastIndex","componentDidMount","componentDidUpdate","prevProps","prevState","setData","render","array","isRequired","func","number"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from \"react\";\r\nimport propTypes from 'prop-types';  \r\n\r\nclass Paginate extends Component {\r\n\r\nconstructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      totalPages: null,\r\n      dataStartingIndex: null,\r\n      dataLastIndex: 0,\r\n      currentClickedNumber: 1,\r\n      pageData: null\r\n    };\r\n  }\r\n\r\n\r\n\r\n  determineNumberOfPages = () => {\r\n    const { data, itemsPerPage } = this.props;\r\n    let paginatedDataObject = {};\r\n\r\n    let index = 0;\r\n    let dataLength = data.length;\r\n    let chunkArray = [];\r\n\r\n    for (index = 0; index < dataLength; index += itemsPerPage) {\r\n      let newChunk = data.slice(index, index + itemsPerPage);\r\n      chunkArray.push(newChunk);\r\n    }\r\n\r\n    chunkArray.forEach((chunk, i) => {\r\n      paginatedDataObject[i + 1] = chunk;\r\n    });\r\n\r\n    this.setState({\r\n      totalPages: chunkArray.length,\r\n      dataStartingIndex: itemsPerPage,\r\n      pageData: paginatedDataObject,\r\n      clickedOnNumber: 1\r\n    });\r\n  };\r\n\r\n\r\n  setCurrentClickedNumber = e => {\r\n    const { target } = e;\r\n    this.setState({\r\n      currentClickedNumber: parseInt(target.innerText)\r\n    });\r\n  };\r\n\r\n  moveToLastPage = () => {\r\n    this.setState({\r\n      currentClickedNumber: this.state.totalPages,\r\n      currentClickedPage: this.state.totalPages\r\n    });\r\n  };\r\n\r\n  moveToFirstPage = () => {\r\n    this.setState({\r\n      currentClickedNumber: 1,\r\n      currentClickedPage: 1\r\n    });\r\n  };\r\n\r\n  moveOnePageForward = () => {\r\n    const { dataStartingIndex, totalPages } = this.state;\r\n\r\n    if (dataStartingIndex) {\r\n      this.setState({\r\n        dataStartingIndex: null,\r\n        currentClickedNumber: 2\r\n      });\r\n    } else {\r\n      this.setState({\r\n        currentClickedNumber:\r\n          this.state.currentClickedNumber + 1 > totalPages\r\n            ? totalPages\r\n            : this.state.currentClickedNumber + 1\r\n      });\r\n    }\r\n  };\r\n\r\n  moveOnePageBackward = () => {\r\n    this.setState({\r\n      currentClickedNumber:\r\n        this.state.currentClickedNumber - 1 < 1\r\n          ? 1\r\n          : this.state.currentClickedNumber - 1\r\n    });\r\n  };\r\n\r\n  pageNumberRender = () => {\r\n    const { totalPages, currentClickedNumber } = this.state;\r\n    let pages = [];\r\n    for (let i = 1; i < totalPages + 1; i++) {\r\n      pages.push(\r\n        <div className=\"page-number\"\r\n          onClick={(e) => {\r\n            this.setCurrentClickedNumber(e);\r\n          }}\r\n          isclicked={currentClickedNumber === i ? true : false}\r\n          key={i}\r\n        >\r\n          {i}\r\n        </div>\r\n      );\r\n    }\r\n    return pages;\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    this.determineNumberOfPages();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { data, setData } = this.props;\r\n    const { currentClickedNumber, pageData } = this.state;\r\n\r\n    if (data !== prevProps.data) {\r\n      this.determineNumberOfPages();\r\n    }\r\n\r\n    if (currentClickedNumber !== prevState.currentClickedNumber) {\r\n      setData(pageData[currentClickedNumber]);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { currentClickedNumber, totalPages } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"page-number-container\">\r\n          <div className=\"arrow-container\">\r\n            {currentClickedNumber > 1 ? (\r\n              <div>\r\n                <span>\r\n                  <div\r\n                    onClick={this.moveToFirstPage}\r\n                    \r\n                  ></div>\r\n                </span>\r\n                <span>\r\n                  <div\r\n                    onClick={this.moveOnePageBackward}\r\n                    \r\n                  > </div>\r\n                </span>\r\n              </div>\r\n            ) : (\r\n              <div />\r\n            )}\r\n          </div>\r\n          <div className=\"number-wrap\">{this.pageNumberRender()}</div>\r\n          <div className=\"arrow-container\">\r\n            {currentClickedNumber !== totalPages ? (\r\n              <div>\r\n                <span>\r\n                  <div\r\n                    onClick={this.moveOnePageForward}\r\n                    \r\n                  ></div>\r\n                </span>\r\n                <span>\r\n                  <div\r\n                    onClick={this.moveToLastPage}\r\n                   \r\n                  ></div>\r\n                </span>\r\n              </div>\r\n            ) : (\r\n              <div></div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n  export default Paginate;\r\n\r\n  Paginate.propTypes = {\r\n    data: propTypes.array.isRequired,\r\n    setData: propTypes.func.isRequired,\r\n    itemsPerPage: propTypes.number.isRequired,\r\n  };"]},"metadata":{},"sourceType":"module"}