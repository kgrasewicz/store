{"ast":null,"code":"import { useRef, useState, useCallback } from 'react';\n/**\n * A hook for controlled value management.\n * In the case of passing the controlled value, the controlled value is returned, otherwise the value in state is returned.\n * Generally used for a component including controlled and uncontrolled modes.\n * @param controlledValue\n * @param defaultValue\n * @param formatValue\n */\n\nfunction useControlled(controlledValue, defaultValue, formatValue) {\n  var _useRef = useRef(controlledValue !== undefined),\n      isControlled = _useRef.current;\n\n  var _useState = useState(defaultValue),\n      uncontrolledValue = _useState[0],\n      setUncontrolledValue = _useState[1]; // If it is controlled, this directly returns the attribute value.\n\n\n  var value = isControlled ? controlledValue : uncontrolledValue;\n  value = formatValue ? formatValue(value) : value;\n  var setValue = useCallback(function (nextValue) {\n    // Only update the value in state when it is not under control.\n    if (!isControlled) {\n      setUncontrolledValue(nextValue);\n    }\n  }, [isControlled]);\n  return [value, setValue, isControlled];\n}\n\nexport default useControlled;","map":{"version":3,"sources":["C:/Programowanie/store/node_modules/rsuite/es/utils/useControlled.js"],"names":["useRef","useState","useCallback","useControlled","controlledValue","defaultValue","formatValue","_useRef","undefined","isControlled","current","_useState","uncontrolledValue","setUncontrolledValue","value","setValue","nextValue"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,aAAT,CAAuBC,eAAvB,EAAwCC,YAAxC,EAAsDC,WAAtD,EAAmE;AACjE,MAAIC,OAAO,GAAGP,MAAM,CAACI,eAAe,KAAKI,SAArB,CAApB;AAAA,MACIC,YAAY,GAAGF,OAAO,CAACG,OAD3B;;AAGA,MAAIC,SAAS,GAAGV,QAAQ,CAACI,YAAD,CAAxB;AAAA,MACIO,iBAAiB,GAAGD,SAAS,CAAC,CAAD,CADjC;AAAA,MAEIE,oBAAoB,GAAGF,SAAS,CAAC,CAAD,CAFpC,CAJiE,CAMxB;;;AAGzC,MAAIG,KAAK,GAAGL,YAAY,GAAGL,eAAH,GAAqBQ,iBAA7C;AACAE,EAAAA,KAAK,GAAGR,WAAW,GAAGA,WAAW,CAACQ,KAAD,CAAd,GAAwBA,KAA3C;AACA,MAAIC,QAAQ,GAAGb,WAAW,CAAC,UAAUc,SAAV,EAAqB;AAC9C;AACA,QAAI,CAACP,YAAL,EAAmB;AACjBI,MAAAA,oBAAoB,CAACG,SAAD,CAApB;AACD;AACF,GALyB,EAKvB,CAACP,YAAD,CALuB,CAA1B;AAMA,SAAO,CAACK,KAAD,EAAQC,QAAR,EAAkBN,YAAlB,CAAP;AACD;;AAED,eAAeN,aAAf","sourcesContent":["import { useRef, useState, useCallback } from 'react';\n/**\n * A hook for controlled value management.\n * In the case of passing the controlled value, the controlled value is returned, otherwise the value in state is returned.\n * Generally used for a component including controlled and uncontrolled modes.\n * @param controlledValue\n * @param defaultValue\n * @param formatValue\n */\n\nfunction useControlled(controlledValue, defaultValue, formatValue) {\n  var _useRef = useRef(controlledValue !== undefined),\n      isControlled = _useRef.current;\n\n  var _useState = useState(defaultValue),\n      uncontrolledValue = _useState[0],\n      setUncontrolledValue = _useState[1]; // If it is controlled, this directly returns the attribute value.\n\n\n  var value = isControlled ? controlledValue : uncontrolledValue;\n  value = formatValue ? formatValue(value) : value;\n  var setValue = useCallback(function (nextValue) {\n    // Only update the value in state when it is not under control.\n    if (!isControlled) {\n      setUncontrolledValue(nextValue);\n    }\n  }, [isControlled]);\n  return [value, setValue, isControlled];\n}\n\nexport default useControlled;"]},"metadata":{},"sourceType":"module"}