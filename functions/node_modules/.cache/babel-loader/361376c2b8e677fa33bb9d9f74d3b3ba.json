{"ast":null,"code":"import { useEffect, useCallback } from 'react';\nimport helper from '../DOMHelper';\nimport { getDOMNode, KEY_CODE } from './';\n\nfunction isLeftClickEvent(event) {\n  return (event === null || event === void 0 ? void 0 : event.button) === 0;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || (event === null || event === void 0 ? void 0 : event.shiftKey));\n}\n/**\n * A hook that listens to the document click event and closes the overlay.\n * @param onRootClose\n * @param param1\n */\n\n\nfunction useRootClose(onRootClose, _ref) {\n  var disabled = _ref.disabled,\n      triggerTarget = _ref.triggerTarget,\n      overlayTarget = _ref.overlayTarget;\n  var handleDocumentKeyUp = useCallback(function (event) {\n    if (event.keyCode === KEY_CODE.ESC) {\n      onRootClose === null || onRootClose === void 0 ? void 0 : onRootClose(event);\n    }\n  }, [onRootClose]);\n  var handleDocumentClick = useCallback(function (event) {\n    var triggerElement = getDOMNode(triggerTarget);\n    var overlayElement = getDOMNode(overlayTarget); // Check if the clicked element is a trigger.\n\n    if (triggerElement && helper.contains(triggerElement, event.target)) {\n      return;\n    } // Check if the clicked element is a overlay.\n\n\n    if (overlayElement && helper.contains(overlayElement, event.target)) {\n      return;\n    }\n\n    if (isModifiedEvent(event) || !isLeftClickEvent(event)) {\n      return;\n    }\n\n    onRootClose === null || onRootClose === void 0 ? void 0 : onRootClose(event);\n  }, [onRootClose, triggerTarget, overlayTarget]);\n  useEffect(function () {\n    var currentTarget = getDOMNode(triggerTarget);\n    if (disabled || !currentTarget) return;\n    var doc = helper.ownerDocument(currentTarget);\n    var onDocumentClickListener = helper.on(doc, 'click', handleDocumentClick, true);\n    var onDocumentKeyupListener = helper.on(doc, 'keyup', handleDocumentKeyUp);\n    return function () {\n      onDocumentClickListener === null || onDocumentClickListener === void 0 ? void 0 : onDocumentClickListener.off();\n      onDocumentKeyupListener === null || onDocumentKeyupListener === void 0 ? void 0 : onDocumentKeyupListener.off();\n    };\n  }, [triggerTarget, disabled, onRootClose, handleDocumentClick, handleDocumentKeyUp]);\n}\n\nexport default useRootClose;","map":{"version":3,"sources":["C:/Programowanie/store/node_modules/rsuite/es/utils/useRootClose.js"],"names":["useEffect","useCallback","helper","getDOMNode","KEY_CODE","isLeftClickEvent","event","button","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","useRootClose","onRootClose","_ref","disabled","triggerTarget","overlayTarget","handleDocumentKeyUp","keyCode","ESC","handleDocumentClick","triggerElement","overlayElement","contains","target","currentTarget","doc","ownerDocument","onDocumentClickListener","on","onDocumentKeyupListener","off"],"mappings":"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","sourcesContent":["import { useEffect, useCallback } from 'react';\nimport helper from '../DOMHelper';\nimport { getDOMNode, KEY_CODE } from './';\n\nfunction isLeftClickEvent(event) {\n  return (event === null || event === void 0 ? void 0 : event.button) === 0;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || (event === null || event === void 0 ? void 0 : event.shiftKey));\n}\n\n/**\n * A hook that listens to the document click event and closes the overlay.\n * @param onRootClose\n * @param param1\n */\nfunction useRootClose(onRootClose, _ref) {\n  var disabled = _ref.disabled,\n      triggerTarget = _ref.triggerTarget,\n      overlayTarget = _ref.overlayTarget;\n  var handleDocumentKeyUp = useCallback(function (event) {\n    if (event.keyCode === KEY_CODE.ESC) {\n      onRootClose === null || onRootClose === void 0 ? void 0 : onRootClose(event);\n    }\n  }, [onRootClose]);\n  var handleDocumentClick = useCallback(function (event) {\n    var triggerElement = getDOMNode(triggerTarget);\n    var overlayElement = getDOMNode(overlayTarget); // Check if the clicked element is a trigger.\n\n    if (triggerElement && helper.contains(triggerElement, event.target)) {\n      return;\n    } // Check if the clicked element is a overlay.\n\n\n    if (overlayElement && helper.contains(overlayElement, event.target)) {\n      return;\n    }\n\n    if (isModifiedEvent(event) || !isLeftClickEvent(event)) {\n      return;\n    }\n\n    onRootClose === null || onRootClose === void 0 ? void 0 : onRootClose(event);\n  }, [onRootClose, triggerTarget, overlayTarget]);\n  useEffect(function () {\n    var currentTarget = getDOMNode(triggerTarget);\n    if (disabled || !currentTarget) return;\n    var doc = helper.ownerDocument(currentTarget);\n    var onDocumentClickListener = helper.on(doc, 'click', handleDocumentClick, true);\n    var onDocumentKeyupListener = helper.on(doc, 'keyup', handleDocumentKeyUp);\n    return function () {\n      onDocumentClickListener === null || onDocumentClickListener === void 0 ? void 0 : onDocumentClickListener.off();\n      onDocumentKeyupListener === null || onDocumentKeyupListener === void 0 ? void 0 : onDocumentKeyupListener.off();\n    };\n  }, [triggerTarget, disabled, onRootClose, handleDocumentClick, handleDocumentKeyUp]);\n}\n\nexport default useRootClose;"]},"metadata":{},"sourceType":"module"}